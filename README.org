* [[https://in.udacity.com/course/version-control-with-git--ud123][Version Control with Git]]

** Create a new repo empty repository in the current directory

#+begin_src sh
git init
#+end_src

** Create an identical copy of an existing repository

#+begin_src sh
git clone <path-to-repository-to-clone>
#+end_src

** Display current status of the repository

#+begin_src sh
git status
#+end_src
	
** Displays all the commits of a repository including SHA, author, date, and the message

#+begin_src sh
git log
#+end_src
	
** Displays short SHA and the message only

#+begin_src sh
git log --oneline
#+end_src
	
** Displays modified files, number of lines added or removed, and summary

#+begin_src sh
git log --stat
#+end_src
	
** Displays modified files, location of the lines added or removed, and the actual changes

#+begin_src sh
git log -p
#+end_src
	
** Displays information about one particular commit

#+begin_src sh
git show <SHA1>
#+end_src

** Adds the files from the working directory to the staging index aka staging files

#+begin_src sh
git add <filename>
#+end_src
	
** Add all files and folders from the current directory

#+begin_src sh
git add .
#+end_src
	
** Saves or records the changes to the repository (from the staging index)

#+begin_src sh
git commit #Opens the editor
git commit -m <msg> #Use <msg> as the commit message
#+end_src

** Displays files modified, location of lines added/removed, and actual changes

#+begin_src sh
git diff
#+end_src

** Displays all tags

#+begin_src sh
git tag
#+end_src
	
** Creates annotated tags(more info)

#+begin_src sh
git tag -a v1.0
#+end_src

** Add tag to a particular commit

#+begin_src sh
git tag -a v1.0 <SHA1>
#+end_src

** Branch

 - master - default or the first branch provided by the git
 - HEAD - points to the active branch

** List all branches

#+begin_src sh
git branch
#+end_src
	
** Create a branch

#+begin_src sh
git branch <branch-name>
#+end_src
	
** Switch to a branch

#+begin_src sh
git checkout <branch-name>
#+end_src
	
** Delete untracked files from a working tree

#+begin_src sh
git clean -d -n // dry run
git clean -d -f // delete untracked files
#+end_src
	
** Removes files from the staging index but doesn't delete the actual content

#+begin_src sh
git rm --cached <file>
#+end_src

** Delete a tag

#+begin_src sh
git tag -d v1.0
#+end_src
		
** Delete a local branch
	
#+begin_src sh
git branch -d <branch-name>
#+end_src

** Force delete a branch with unique commit

#+begin_src sh
git branch -D <branch-name>
#+end_src
	
** Delete branch from the remote

#+begin_src sh
git push --delete <remote> <branch>
git push origin :<branch>
git push origin --delete <branch>
#+end_src
	
** Add a branch to commit

#+begin_src sh
git branch <branch-name> <SHA1>
#+end_src
	
** Create and switch to the branch

#+begin_src sh
git checkout -b <branch-name>
#+end_src
	
** Display all branchs in a graph

#+begin_src sh
git log --oneline --decorate --graph --all
#+end_src

** Merge

 - Combining branches together
 - Makes a commit

** Combine <branch-name> to the active branch.

#+begin_src sh
git merge <branch-name>
#+end_src
	
** Indicators

 - <<<<<<< HEAD everything below this line (until the next indicator) shows you what's on the current branch
 - ||||||| merged common ancestors everything below this line (until the next indicator) shows you what the original lines were
 - ======= is the end of the original lines, everything that follows (until the next indicator) is what's on the branch that's being merged in
 - >>>>>>> <branch-name> is the ending indicator of what's on the branch that's being merged in (in this case, the <branch-name> branch)
	
** Change the last commit or add/remove the files.
   
#+begin_src sh
git commit --amend
#+end_src
	
** Reverse a previously made commit

#+begin_src sh
git revert <SHA>
#+end_src

** Ancestry References

 - ^ - caret
 - ~ - tilde
 - The parent commit – the following indicate the parent commit of the current commit
   - HEAD^
   - HEAD~
   - HEAD~1

	The grandparent commit – the following indicate the grandparent commit of the current commit
	HEAD^^
	HEAD~2

	The great-grandparent commit – the following indicate the great-grandparent commit of the current commit
	HEAD^^^
	HEAD~3

	^ when merged this represents the parent which had HEAD pointed to it. The other branch was merged into this one.
	^2 the second parent or the branch which was merged into the first parent.

 - HEAD~3 HEAD~2 HEAD~1 HEAD

 - HEAD~1 - go back 1 commit from HEAD
	
** Erase commits

	Move the head to the parent commit and discarded commit to the working directory.
	git reset --mixed HEAD^
	
	Moves the discarded commit to the staging area
	git reset --soft HEAD^

	Erase commit or move them to the trash
	git reset --hard HEAD^

** Make a branch on the current commit

    git branch backup

* [GitHub & Collaboration](https://in.udacity.com/course/github-collaboration--ud456)

** Naming convention

    local - your local git repository
    remote - 3rd party git repo which may or may not be local.
    origin - main remote repo. Or the forked repository
	upstream - source or the original repository where origin was forked from.
	
** Manage and interact with the remote repositories

    git remote
	
** Display full path to the remote repository

    git remote -v
	
** Add shortname and the remote url to the local repo	
    	
    git remote add origin git@github.com:sudhirkhanger/my-travel-plans.git - add shortname to the url

** Send local commits to the remote repo.

	git push -u <remote-shortname> <branch>

** Tracking branch

    origin/master - remote branch origin has a master branch at some commit. Tracks the progress of the master branch on the remote branch origin.
	
** Sync remote repository with the local

	// pulls remote branch origin's commit to the master branch. Merge happens.
    git pull origin master
	
** Retrive commits from the remote branch and without merge

	// fetch all branches of the origin
	git fetch origin
	// fetch origin's commits from master branch
    git fetch origin master
	// merge origin/master with the current branch
	git merge origin/master

** Number of commits made by each contributor

	git shortlog
	
** List contributor name and number of commits

    git shortlog -s -n

** Filter commits by author name

    git log --author=<contributor name>
	
** Filter commits by search query

    git log --grep=<search>

** Change shortnames

	git remote rename <new-name> <existing-name>
	
** Retrieving Upstream Changes
	
	// add the source repository
	git remote add upstream <url-of-the-source-repository>

	// fetches changes from the upstream source repository
	// upstream/master - tracks where upstream's master branch is

	// fetch all branches of the upstream
	git fetch upstream

	// fetch upstream's commits from master branch
	git fetch upstream master
	
	// to sync to your fork merge into a local branch and push it to the origin
	git checkout master
	git merge upstream/master
	git push origin master
	
** Squash commits

- Move commits to a new base.
- Squash three commits into one then use HEAD~3
- Change pick from 2nd line to squash. Save changes.
- An editor would open where you can provide the new commit. Save changes.

#+begin_src sh
git rebase -i <base for example HEAD~3>
#+end_src

	
** Force push a branch

	git push -f <remote-branch> <local-branch>
	
* [Think Like a Git](http://think-like-a-git.net)

    to list all commits in your repository at the command line
    git log --oneline --abbrev-commit --all

    git log --oneline --abbrev-commit --all --graph

    If you want to see branch and tag labels, add --decorate:
    git log --oneline --abbrev-commit --all --graph --decorate

    git log --oneline --abbrev-commit --all --graph --decorate --color
	
* Misc

    git reset --hard HEAD

    git remote show branch
    
    git branch -r
    
    git branch -a
    
    git branch -vv
    
    git branch -v
    
** Set Url

#+BEGIN_SRC sh
git remote set-url origin new-url
#+END_SRC

** Remove files after adding .gitignore

#+BEGIN_SRC sh
git rm -r --cached . 
git add .
git commit -m 'Removed all files that are in the .gitignore' 
git push origin master
#+END_SRC

** Git Stash

#+begin_src sh
# stash tracked changes
git stash
#+end_src

#+begin_src sh
# stash both tracked and untracked changes
git stash -u
#+end_src

#+begin_src sh
# stash with a descriptive name
git stash save "save with a name"
#+end_src

#+begin_src sh
# list stash
git stash list
#+end_src

#+begin_src sh
# apply most recent changes with removing from the list	
git stash pop
#+end_src

#+begin_src sh
# apply without removing from the list
git stash apply
#+end_src

#+begin_src sh
# apply a particular stash
git stash pop stash@{0}
#+end_src

#+begin_src sh
# remove stash
git stash drop
#+end_src

** Git remove files

    git rm file1.txt
    git commit -m "remove file1.txt"

    remove from git but not from file system
    git rm --cached file1.txt

    git push origin master

** Git remove prune stale branches

	git remote prune origin --dry-run
	git remote prune origin
	
** Tagging

	git tag -a v1.0.0 -m "Releasing version v1.0.0"
	git push origin v1.0

** Diff

	git diff <branch-one>:/path/to/file <branch-two>:/path/to/file

** Merge individual files

	git checkout <git brach to merge from> <file 1> <file 2>
	
** Remove unstaged changes

	git checkout -- .
	git checkout -- <file-path> // individual files

** Rename branch

- creats a new branch with same commits from oldname branch
   
#+begin_src sh
git branch -m oldname newname
#+end_src

** Create another branch off an existing one

- sub-branch will be created off existing-branch
  
#+begin_src sh
git checkout -b sub-branch existing-branch
#+end_src
